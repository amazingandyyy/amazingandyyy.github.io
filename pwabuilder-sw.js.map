{"version":3,"sources":["pwabuilder-sw.js"],"names":["CACHE","offlineFallbackPage","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","add","Response","request","method","respondWith","fetch","catch","error","destination","mode","match","offlinePageRequest","Request","response","url","put"],"mappings":";AAEA,IAAMA,EAAQ,kBAGRC,EAAsB,8BAG5BC,KAAKC,iBAAiB,UAAW,SAAUC,GACzCC,QAAQC,IAAI,0CAEZF,EAAMG,UACJC,OAAOC,KAAKT,GAAOU,KAAK,SAAUC,GAG5BV,OAFJI,QAAQC,IAAI,oDAEgB,gCAAxBL,EACKU,EAAMC,IAAI,IAAIC,SAAS,qFAGzBF,EAAMC,IAAIX,QAMvBC,KAAKC,iBAAiB,QAAS,SAAUC,GACV,QAAzBA,EAAMU,QAAQC,QAElBX,EAAMY,YACJC,MAAMb,EAAMU,SAASI,MAAM,SAAUC,GAGjCf,GAA8B,aAA9BA,EAAMU,QAAQM,aACS,aAAvBhB,EAAMU,QAAQO,KAMTb,OADPH,QAAQc,MAAM,8DAAgEA,GACvEX,OAAOC,KAAKT,GAAOU,KAAK,SAAUC,GAChCA,OAAAA,EAAMW,MAAMrB,UAO3BC,KAAKC,iBAAiB,iBAAkB,WAChCoB,IAAAA,EAAqB,IAAIC,QAAQvB,GAEhCgB,OAAAA,MAAMhB,GAAqBS,KAAK,SAAUe,GACxCjB,OAAAA,OAAOC,KAAKT,GAAOU,KAAK,SAAUC,GAEhCA,OADPN,QAAQC,IAAI,iEAAmEmB,EAASC,KACjFf,EAAMgB,IAAIJ,EAAoBE","file":"pwabuilder-sw.js","sourceRoot":"../src","sourcesContent":["// This is the \"Offline page\" service worker\n\nconst CACHE = 'pwabuilder-page'\n\n// TODO: replace the following with the correct offline fallback page i.e.: const offlineFallbackPage = \"offline.html\";\nconst offlineFallbackPage = 'ToDo-replace-this-name.html'\n\n// Install stage sets up the offline page in the cache and opens a new cache\nself.addEventListener('install', function (event) {\n  console.log('[PWA Builder] Install Event processing')\n\n  event.waitUntil(\n    caches.open(CACHE).then(function (cache) {\n      console.log('[PWA Builder] Cached offline page during install')\n\n      if (offlineFallbackPage === 'ToDo-replace-this-name.html') {\n        return cache.add(new Response('TODO: Update the value of the offlineFallbackPage constant in the serviceworker.'))\n      }\n\n      return cache.add(offlineFallbackPage)\n    })\n  )\n})\n\n// If any fetch fails, it will show the offline page.\nself.addEventListener('fetch', function (event) {\n  if (event.request.method !== 'GET') return\n\n  event.respondWith(\n    fetch(event.request).catch(function (error) {\n      // The following validates that the request was for a navigation to a new document\n      if (\n        event.request.destination !== 'document' ||\n        event.request.mode !== 'navigate'\n      ) {\n        return\n      }\n\n      console.error('[PWA Builder] Network request Failed. Serving offline page ' + error)\n      return caches.open(CACHE).then(function (cache) {\n        return cache.match(offlineFallbackPage)\n      })\n    })\n  )\n})\n\n// This is an event that can be fired from your page to tell the SW to update the offline page\nself.addEventListener('refreshOffline', function () {\n  const offlinePageRequest = new Request(offlineFallbackPage)\n\n  return fetch(offlineFallbackPage).then(function (response) {\n    return caches.open(CACHE).then(function (cache) {\n      console.log('[PWA Builder] Offline page updated from refreshOffline event: ' + response.url)\n      return cache.put(offlinePageRequest, response)\n    })\n  })\n})\n"]}